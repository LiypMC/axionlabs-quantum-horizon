name: Deploy AxionLabs API

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'workers/api/package-lock.json'
      
      - name: Install dependencies
        working-directory: workers/api
        run: npm ci
      
      - name: Run type check
        working-directory: workers/api
        run: npm run type-check
      
      - name: Run tests
        working-directory: workers/api
        run: npm test

  deploy-staging:
    if: github.ref == 'refs/heads/staging'
    needs: test
    runs-on: ubuntu-latest
    name: Deploy to Staging
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'workers/api/package-lock.json'
      
      - name: Install dependencies
        working-directory: workers/api
        run: npm ci
      
      - name: Deploy to Cloudflare Workers
        working-directory: workers/api
        run: npm run deploy:staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    name: Deploy to Production
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'workers/api/package-lock.json'
      
      - name: Install dependencies
        working-directory: workers/api
        run: npm ci
      
      - name: Deploy to Cloudflare Workers
        working-directory: workers/api
        run: npm run deploy:production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}